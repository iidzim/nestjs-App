import { User } from "./users.model";
export declare class UsersService {
    private users;
    insertUser(id: number, username: string, avatar: string): number;
    getAllUsers(): User[];
    getUser(id: number): {
        [x: number]: number | User;
        0: User;
        1: number;
        length: 2;
        toString(): string;
        toLocaleString(): string;
        pop(): number | User;
        push(...items: (number | User)[]): number;
        concat(...items: ConcatArray<number | User>[]): (number | User)[];
        concat(...items: (number | User | ConcatArray<number | User>)[]): (number | User)[];
        join(separator?: string): string;
        reverse(): (number | User)[];
        shift(): number | User;
        slice(start?: number, end?: number): (number | User)[];
        sort(compareFn?: (a: number | User, b: number | User) => number): [User, number];
        splice(start: number, deleteCount?: number): (number | User)[];
        splice(start: number, deleteCount: number, ...items: (number | User)[]): (number | User)[];
        unshift(...items: (number | User)[]): number;
        indexOf(searchElement: number | User, fromIndex?: number): number;
        lastIndexOf(searchElement: number | User, fromIndex?: number): number;
        every<S extends number | User>(predicate: (value: number | User, index: number, array: (number | User)[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: number | User, index: number, array: (number | User)[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: number | User, index: number, array: (number | User)[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: number | User, index: number, array: (number | User)[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: number | User, index: number, array: (number | User)[]) => U, thisArg?: any): U[];
        filter<S_1 extends number | User>(predicate: (value: number | User, index: number, array: (number | User)[]) => value is S_1, thisArg?: any): S_1[];
        filter(predicate: (value: number | User, index: number, array: (number | User)[]) => unknown, thisArg?: any): (number | User)[];
        reduce(callbackfn: (previousValue: number | User, currentValue: number | User, currentIndex: number, array: (number | User)[]) => number | User): number | User;
        reduce(callbackfn: (previousValue: number | User, currentValue: number | User, currentIndex: number, array: (number | User)[]) => number | User, initialValue: number | User): number | User;
        reduce<U_1>(callbackfn: (previousValue: U_1, currentValue: number | User, currentIndex: number, array: (number | User)[]) => U_1, initialValue: U_1): U_1;
        reduceRight(callbackfn: (previousValue: number | User, currentValue: number | User, currentIndex: number, array: (number | User)[]) => number | User): number | User;
        reduceRight(callbackfn: (previousValue: number | User, currentValue: number | User, currentIndex: number, array: (number | User)[]) => number | User, initialValue: number | User): number | User;
        reduceRight<U_2>(callbackfn: (previousValue: U_2, currentValue: number | User, currentIndex: number, array: (number | User)[]) => U_2, initialValue: U_2): U_2;
        find<S_2 extends number | User>(predicate: (this: void, value: number | User, index: number, obj: (number | User)[]) => value is S_2, thisArg?: any): S_2;
        find(predicate: (value: number | User, index: number, obj: (number | User)[]) => unknown, thisArg?: any): number | User;
        findIndex(predicate: (value: number | User, index: number, obj: (number | User)[]) => unknown, thisArg?: any): number;
        fill(value: number | User, start?: number, end?: number): [User, number];
        copyWithin(target: number, start: number, end?: number): [User, number];
        entries(): IterableIterator<[number, number | User]>;
        keys(): IterableIterator<number>;
        values(): IterableIterator<number | User>;
        includes(searchElement: number | User, fromIndex?: number): boolean;
        flatMap<U_3, This = undefined>(callback: (this: This, value: number | User, index: number, array: (number | User)[]) => U_3 | readonly U_3[], thisArg?: This): U_3[];
        flat<A, D extends number = 1>(this: A, depth?: D): FlatArray<A, D>[];
        [Symbol.iterator](): IterableIterator<number | User>;
        [Symbol.unscopables](): {
            copyWithin: boolean;
            entries: boolean;
            fill: boolean;
            find: boolean;
            findIndex: boolean;
            keys: boolean;
            values: boolean;
        };
        at(index: number): number | User;
    };
    updateUsername(id: number, username: string): void;
    updateAvatar(id: number, avatar: string): void;
    updateLevel(id: number, lvl: number): void;
    updateStatus(id: number, status: string): void;
    private findUser;
    private duplicateUser;
}
